[{"content":"クラスタ化インデックスと非クラスタ化インデックスの違い クラスタ化インデックス（Clustered Index）と非クラスタ化インデックス（Non-Clustered Index）は、データベース管理システムにおける 2 つの一般的なインデックスのタイプです。それぞれの主な違いと利点・欠点は以下の通りです。\n1. クラスタ化インデックス（Clustered Index） 定義：\nクラスタ化インデックスは、テーブル内のデータを物理的にインデックスキーの順に並べて保存します。各テーブルには 1 つのクラスタ化インデックスしか存在できません。なぜなら、物理的なデータの順序は 1 つしかないためです。 クラスタ化インデックスのリーフノード（葉ノード）は、実際のデータ行そのものであり、インデックスを参照することで直接データにアクセスできます。 利点：\nデータアクセス速度が速い：データとインデックスが物理的に一緒に保存されているため、インデックスを使用した検索結果がすぐにデータ行に到達します。特に範囲検索（例: BETWEEN や ORDER BY）では速度が速くなります。 バッチデータ操作が効率的：範囲検索や並べ替えを行う場合、クラスタ化インデックスによってディスク I/O の回数を減らし、クエリの効率を向上させます。 EXISTS と IN はどちらか効率ある？ 1. EXISTS の場合: EXISTS は、サブクエリの結果が 1 つでも見つかれば、即座に true を返します。そのため、大量のデータがある場合や、サブクエリの条件に合致する行が少ない場合に効率的です。通常、EXISTS は「存在確認」に特化しており、最適化されているため、大規模なデータセットでは効率が高いことが多いです。\n1 2 SELECT column1 FROM table1 WHERE EXISTS (SELECT 1 FROM table2 WHERE table2.column2 = table1.column1); 2. IN の場合: IN は、サブクエリから得られる結果のリストに対して、比較対象の値がそのリストに含まれているかどうかをチェックします。小さなデータセットでは IN の方がわかりやすく、効率が良い場合もありますが、大規模なデータセットの場合は、リスト全体をスキャンすることになるため、EXISTS よりも非効率になることがあります。\n1 2 SELECT column1 FROM table1 WHERE column1 IN (SELECT column2 FROM table2); パフォーマンスに関する一般的な違い:\nEXISTS の方が効率的: EXISTS は結果が見つかり次第処理を終了するため、大規模なデータセットに対して効率が良いことが多いです。 IN の方がシンプル: 小規模なデータセットや単純なサブクエリでは IN の方がシンプルで、十分なパフォーマンスを発揮することもあります。 結論: データ量が大きい場合は一般的に EXISTS の方が効率が良い傾向にありますが、データベースの実装やクエリの最適化によっても異なるため、具体的なケースで確認するのが最も確実です。\n","date":"2024-10-02T17:59:37+08:00","permalink":"https://eymeria-cyber.github.io/eymeria-blog/p/sql%E3%81%AE%E6%9C%80%E9%81%A9%E5%8C%96%232/","title":"SQLの最適化#2"},{"content":"1.インデックスの利用 インデックスの作成： よく使用する列（特に WHERE 句、JOIN、GROUP BY、ORDER BY に使用される列）にインデックスを追加します。\n1. WHERE 句にインデックスを追加する例 例えば、users テーブルがあり、ユーザー ID に基づいてユーザーを検索するクエリが頻繁に実行される場合、user_id 列にインデックスを作成することでクエリの速度が向上します。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 -- テーブル構造の例 CREATE TABLE users ( user_id INT, name VARCHAR(100), age INT, email VARCHAR(100), PRIMARY KEY (user_id) ); -- インデックスの作成 CREATE INDEX idx_user_id ON users(user_id); -- 最適化されるクエリの例 SELECT * FROM users WHERE user_id = 123; 上記のクエリでは、user_id にインデックスがあることで、データベースはテーブル全体をスキャンせずに、インデックスを使って素早く結果を取得できます。\n2. JOIN 句で使用される列にインデックスを追加する例 異なるテーブル間で結合（JOIN）を行う場合、結合に使用される列にインデックスを設定すると、クエリのパフォーマンスが向上します。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 -- テーブル構造の例 CREATE TABLE orders ( order_id INT, user_id INT, product_name VARCHAR(100), order_date DATE, PRIMARY KEY (order_id) ); -- JOINに使用されるuser_idにインデックスを作成 CREATE INDEX idx_orders_user_id ON orders(user_id); -- 最適化されるJOINクエリの例 SELECT u.name, o.product_name FROM users u JOIN orders o ON u.user_id = o.user_id WHERE u.user_id = 123; ここでは、orders テーブルの user_id にインデックスを作成することで、結合のパフォーマンスが向上します。\n3. GROUP BY 句に使用される列にインデックスを追加する例 GROUP BY 句で使用される列にもインデックスを設定することで、グループ化の処理が高速化されます。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 -- テーブル構造の例 CREATE TABLE sales ( sale_id INT, product_id INT, amount DECIMAL(10, 2), sale_date DATE, PRIMARY KEY (sale_id) ); -- product_idにインデックスを作成 CREATE INDEX idx_sales_product_id ON sales(product_id); -- 最適化されるクエリの例 SELECT product_id, SUM(amount) FROM sales GROUP BY product_id; インデックスの作成によってクエリの速度が改善されますが、インデックスの作成はデータベースの書き込み操作に影響を与えることもあるため、適切な列にのみインデックスを付与することが重要です。\nインデックスの種類: 適切なインデックスの種類（B-tree、ハッシュ、全文インデックスなど）を選択し、パフォーマンス向上に役立てます。\n1. B-tree インデックス B-tree（Balanced Tree）インデックスは、最も一般的で広く使用されるインデックスの種類です。主に WHERE 句、ORDER BY、GROUP BY、JOIN などでの検索やソートに最適です。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 -- テーブル構造 CREATE TABLE employees ( employee_id INT, name VARCHAR(100), salary DECIMAL(10, 2), hire_date DATE, PRIMARY KEY (employee_id) ); -- hire_dateにB-treeインデックスを作成 CREATE INDEX idx_hire_date ON employees(hire_date); -- B-treeインデックスが効くクエリ例 SELECT * FROM employees WHERE hire_date \u0026gt; \u0026#39;2022-01-01\u0026#39; ORDER BY hire_date; 適用シナリオ:\n範囲検索（\u0026gt;, \u0026lt;, BETWEEN など） 並べ替えやグループ化が必要な場合 複数の異なる値を持つ列 2. ハッシュインデックス ハッシュインデックスは、キーとそのデータのアドレスをマッピングするハッシュテーブルを使用します。このインデックスは、完全一致検索に非常に高速ですが、範囲検索やソートには使用できません。\n例:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 -- テーブル構造 CREATE TABLE sessions ( session_id CHAR(64), user_id INT, start_time TIMESTAMP, PRIMARY KEY (session_id) ); -- session_idにハッシュインデックスを作成 (PostgreSQLなどでの例) CREATE INDEX idx_session_id_hash ON sessions USING HASH (session_id); -- ハッシュインデックスが効くクエリ例 SELECT * FROM sessions WHERE session_id = \u0026#39;abc123xyz\u0026#39;; 適用シナリオ:\n完全一致検索 (=)が頻繁な場合 範囲検索や順序付けが不要な場合 3. 全文インデックス（Full-Text Index） 全文インデックスは、テキストベースの検索を高速化するために使用されます。主に長いテキストや文章内のキーワード検索で性能を発揮します。\n例:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 -- テーブル構造 CREATE TABLE articles ( article_id INT, title VARCHAR(200), content TEXT, PRIMARY KEY (article_id) ); -- contentに全文インデックスを作成 CREATE FULLTEXT INDEX idx_content_fulltext ON articles(content); -- 全文インデックスが効くクエリ例 SELECT * FROM articles WHERE MATCH(content) AGAINST(\u0026#39;SQL optimization\u0026#39;); 適用シナリオ:\n長いテキストや文章データ内のキーワード検索 ニュース記事やブログ投稿の検索 4. GiST インデックス（Generalized Search Tree） GiST インデックスは、空間検索や近似検索など、より複雑なクエリに使用される汎用的なツリーインデックスです。\n例:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 -- テーブル構造（PostGISなどの拡張を使用した地理データ） CREATE TABLE locations ( location_id INT, name VARCHAR(100), coordinates GEOGRAPHY(Point), PRIMARY KEY (location_id) ); -- coordinatesにGiSTインデックスを作成 CREATE INDEX idx_coordinates_gist ON locations USING GIST (coordinates); -- GiSTインデックスが効くクエリ例 SELECT * FROM locations WHERE ST_DWithin(coordinates, \u0026#39;POINT(139.6917 35.6895)\u0026#39;, 10000); 適用シナリオ:\n空間データや地理情報の検索 近傍検索や範囲検索 5. 逆順（Descending）インデックス 逆順インデックスは、降順に最適化されたインデックスです。主に ORDER BY \u0026hellip; DESC のクエリで使用されます。\n例:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 -- テーブル構造 CREATE TABLE transactions ( transaction_id INT, amount DECIMAL(10, 2), transaction_date DATE, PRIMARY KEY (transaction_id) ); -- transaction_dateに逆順インデックスを作成 CREATE INDEX idx_transaction_date_desc ON transactions(transaction_date DESC); -- 逆順インデックスが効くクエリ例 SELECT * FROM transactions ORDER BY transaction_date DESC; 適用シナリオ:\n降順でのソートが頻繁な場合 各インデックスには、それぞれの特性に合わせた用途があります。クエリのパフォーマンス向上のために、適切なインデックスを選んで使用することが重要です。\n2. 不必要なクエリを避ける SELECT *を避ける: 必要な列のみを指定します。SELECT *は不要なデータの取得を引き起こし、パフォーマンスに悪影響を与えます。 サブクエリの代わりに結合を使用する: サブクエリは計算負荷が高くなる場合があります。JOIN を使用してパフォーマンスを向上させましょう。 例えば：\n1 2 3 4 -- 商品ごとの最新の注文日を取得するサブクエリの例 SELECT p.product_id, p.product_name, (SELECT MAX(order_date) FROM orders o WHERE o.product_id = p.product_id) AS last_order_date FROM products p; これを JOIN で書き換えると以下のようになります。\n1 2 3 4 5 -- JOINを使用して最新の注文日を取得する SELECT p.product_id, p.product_name, MAX(o.order_date) AS last_order_date FROM products p LEFT JOIN orders o ON p.product_id = o.product_id GROUP BY p.product_id, p.product_name; この方法のメリット:\nMAX()関数と JOIN を組み合わせることで、全てのデータを一度に集計できます。 サブクエリを何度も実行する必要がなく、効率的に動作します。 まとめ\nサブクエリは、各行に対して複数回実行される場合があり、データ量が増えるとパフォーマンスが悪化しやすいです。 JOIN は、テーブル全体を結合してから集計を行うため、一度の処理で効率的に結果を得られます。 JOIN を用いた書き方は、特に大量データ処理において計算負荷を軽減し、パフォーマンスを向上させる効果があります。 このように、サブクエリを JOIN に置き換えることで、より効率的なクエリを実現できます。\n3. クエリの書き方を工夫する WHERE 句の最適化: クエリの実行時にフィルター条件を最適化します。例えば、OR よりも UNION を使う方が効率的な場合があります。 LIKE 句の最適化: ワイルドカード（例えば%）の使用を最小限にし、インデックスを活用できるようにします。 WHERE 句の最適化は、クエリのパフォーマンスを向上させるために非常に重要です。特に OR 条件を含むクエリは、パフォーマンスに悪影響を与える場合があります。OR の代わりに UNION を使用することで、クエリの実行効率を改善できるケースがあります。以下に、その具体的な例を示します。\nOR を使用した非効率なクエリの例\n以下の例では、employees テーブルから特定の部署の従業員を取得するクエリです。このクエリは、department_id が 1 または 2 の従業員を取得します。\n1 2 3 4 5 6 7 8 9 10 11 12 -- テーブル構造の例 CREATE TABLE employees ( employee_id INT, name VARCHAR(100), department_id INT, PRIMARY KEY (employee_id) ); -- ORを使用したクエリ SELECT * FROM employees WHERE department_id = 1 OR employee_id = 2; 問題点:\nOR employee_id 列と department_id 列にはそれぞれ独立したインデックスがあります。MySQL に例として通常で、1 つのクエリ内で各テーブルに対して 1 つのインデックスしか使用しません。この場合、どのインデックスを使用すべきでしょうか？もし department_id のインデックスを使用すると、1 にある行を見つけるためにテーブルスキャンを実行しなければなりません。一方、city のインデックスを使用すると、employee_id が 2 である行に対してテーブルスキャンを行う必要があります。 UNION ソリューションはこのようなケースに適しています。\nOR の代わりに UNION を使用することで、クエリを分割して実行でき、インデックスが効果的に利用されることが多いです。\n1 2 3 4 5 6 7 8 9 10 -- UNIONを使用したクエリ SELECT * FROM employees WHERE department_id = 1 UNION SELECT * FROM employees WHERE employee_id = 2; このようにすれば、各サブクエリがそれぞれのインデックスを使用して検索を行い、その後、サブクエリの結果を結合します。 なぜUNIONが効率的なのか？\n1.インデックスの使用:\nOR 条件はインデックスの最適利用を妨げることがあるのに対し、UNION ではそれぞれの SELECT 文が個別に実行され、インデックスを利用しやすくなります。 2.フルテーブルスキャンの回避:\nOR の場合、テーブル全体をスキャンする可能性があるが、UNION はインデックスを使い、部分的なスキャンで済みます。 別のケース：範囲条件の最適化\n他の参考：SQL Performance UNION vs OR\nUNION ALLとUNIONの違い\nUNION ALLは結果セットをそのまま結合するため、重複を排除せず、高速です。 UNIONは重複する行を削除するため、その分パフォーマンスに影響が出る可能性があります。 最適化のポイント\nデータが重複しないことが確実であれば、UNION より UNION ALL を選びましょう。UNION ALL は重複排除を行わないため、より高速です。 インデックスの使用を最大化するために、UNION や UNION ALL を適切に利用し、クエリの効率を高めることができます。 UNION を使用することで、特定のクエリの実行パフォーマンスを大幅に向上させることが可能です。状況に応じてこれらの手法を使い分けると良いでしょう。\n4. データベース設計の見直し 正規化と非正規化のバランス: データの重複を減らすための正規化は大事ですが、アクセス頻度の高いデータは非正規化してアクセスを高速化することもあります。 パーティショニング: 大きなテーブルをパーティションに分割することで、クエリパフォーマンスを向上させることができます。 5. クエリの実行計画を確認 EXPLAIN の使用: クエリの実行計画を確認し、インデックスの使用状況やテーブルスキャンが発生していないかをチェックします。 6. トランザクションの最適化 トランザクションの範囲を最小限に: トランザクションの範囲が大きいとロックが発生しやすくなります。トランザクションを小さくし、コミットを適切に行うようにします。 7. キャッシュの利用 クエリキャッシュ: 頻繁に実行されるクエリはキャッシュすることで、再実行時のパフォーマンスが向上します（ただし、キャッシュの適用はシナリオによります）。 これらの方法を活用し、SQL クエリのパフォーマンスを向上させましょう。最適化のアプローチは、データベースの種類や具体的なクエリ内容により異なる場合があるため、実際の状況に合わせて調整してください。\n","date":"2024-09-26T00:12:09+08:00","permalink":"https://eymeria-cyber.github.io/eymeria-blog/p/sql%E3%81%AE%E6%9C%80%E9%81%A9%E5%8C%96%231/","title":"SQLの最適化#1"},{"content":"This is my first blog Hi everyone, this is my first blog post. I\u0026rsquo;m still deciding what articles to write, but I want to share some words, even if I don\u0026rsquo;t have any deep intellectual ideas yet. Besides studying and tech topics, I\u0026rsquo;ll also record my life or just post some pictures.\nAbout me I\u0026rsquo;m a backend developer, but I can also dabble in front-end development with technologies like React. My interests include anime and traditional Chinese culture.\n","date":"2024-09-17T17:47:06+08:00","permalink":"https://eymeria-cyber.github.io/eymeria-blog/p/hello-there/","title":"Hello there"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"https://eymeria-cyber.github.io/eymeria-blog/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hu6307248181568134095.jpg","permalink":"https://eymeria-cyber.github.io/eymeria-blog/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"Lorem est tota propiore conpellat pectoribus de pectora summo.\nRedit teque digerit hominumque toris verebor lumina non cervice subde tollit usus habet Arctonque, furores quas nec ferunt. Quoque montibus nunc caluere tempus inhospita parcite confusaque translucet patri vestro qui optatis lumine cognoscere flos nubis! Fronde ipsamque patulos Dryopen deorum.\nExierant elisi ambit vivere dedere Duce pollice Eris modo Spargitque ferrea quos palude Rursus nulli murmur; hastile inridet ut ab gravi sententia! Nomine potitus silentia flumen, sustinet placuit petis in dilapsa erat sunt. Atria tractus malis.\nComas hunc haec pietate fetum procerum dixit Post torum vates letum Tiresia Flumen querellas Arcanaque montibus omnes Quidem et Vagus elidunt The Van de Graaf Canon\nMane refeci capiebant unda mulcebat Victa caducifer, malo vulnere contra dicere aurato, ludit regale, voca! Retorsit colit est profanae esse virescere furit nec; iaculi matertera et visa est, viribus. Divesque creatis, tecta novat collumque vulnus est, parvas. Faces illo pepulere tempus adest. Tendit flamma, ab opes virum sustinet, sidus sequendo urbis.\nIubar proles corpore raptos vero auctor imperium; sed et huic: manus caeli Lelegas tu lux. Verbis obstitit intus oblectamina fixis linguisque ausus sperare Echionides cornuaque tenent clausit possit. Omnia putatur. Praeteritae refert ausus; ferebant e primus lora nutat, vici quae mea ipse. Et iter nil spectatae vulnus haerentia iuste et exercebat, sui et.\nEurytus Hector, materna ipsumque ut Politen, nec, nate, ignari, vernum cohaesit sequitur. Vel mitis temploque vocatus, inque alis, oculos nomen non silvis corpore coniunx ne displicet illa. Crescunt non unus, vidit visa quantum inmiti flumina mortis facto sic: undique a alios vincula sunt iactata abdita! Suspenderat ego fuit tendit: luna, ante urbem Propoetides parte.\n","date":"2019-03-09T00:00:00Z","image":"https://eymeria-cyber.github.io/eymeria-blog/p/placeholder-text/matt-le-SJSpo9hQf7s-unsplash_hu10664154974910995856.jpg","permalink":"https://eymeria-cyber.github.io/eymeria-blog/p/placeholder-text/","title":"Placeholder Text"},{"content":"Mathematical notation in a Hugo project can be enabled by using third party JavaScript libraries.\nIn this example we will be using KaTeX\nCreate a partial under /layouts/partials/math.html Within this partial reference the Auto-render Extension or host these scripts locally. Include the partial in your templates like so: 1 2 3 {{ if or .Params.math .Site.Params.math }} {{ partial \u0026#34;math.html\u0026#34; . }} {{ end }} To enable KaTeX globally set the parameter math to true in a project\u0026rsquo;s configuration To enable KaTeX on a per page basis include the parameter math: true in content files Note: Use the online reference of Supported TeX Functions\nExamples Inline math: $\\varphi = \\dfrac{1+\\sqrt5}{2}= 1.6180339887…$\nBlock math: $$ \\varphi = 1+\\frac{1} {1+\\frac{1} {1+\\frac{1} {1+\\cdots} } } $$","date":"2019-03-08T00:00:00Z","permalink":"https://eymeria-cyber.github.io/eymeria-blog/p/math-typesetting/","title":"Math Typesetting"},{"content":"Emoji can be enabled in a Hugo project in a number of ways.\nThe emojify function can be called directly in templates or Inline Shortcodes.\nTo enable emoji globally, set enableEmoji to true in your site\u0026rsquo;s configuration and then you can type emoji shorthand codes directly in content files; e.g.\n🙈 :see_no_evil: 🙉 :hear_no_evil: 🙊 :speak_no_evil:\nThe Emoji cheat sheet is a useful reference for emoji shorthand codes.\nN.B. The above steps enable Unicode Standard emoji characters and sequences in Hugo, however the rendering of these glyphs depends on the browser and the platform. To style the emoji you can either use a third party emoji font or a font stack; e.g.\n1 2 3 .emoji { font-family: Apple Color Emoji, Segoe UI Emoji, NotoColorEmoji, Segoe UI Symbol, Android Emoji, EmojiSymbols; } ","date":"2019-03-05T00:00:00Z","image":"https://eymeria-cyber.github.io/eymeria-blog/p/emoji-support/the-creative-exchange-d2zvqp3fpro-unsplash_hu5876398126655421130.jpg","permalink":"https://eymeria-cyber.github.io/eymeria-blog/p/emoji-support/","title":"Emoji Support"}]